1. Pelanggan Bergelar

Tampilkan hanya nama-nama pelanggan yang hanya memiliki gelar-gelar berikut: S.H, Ir. dan Drs.
Nama kolom yang harus ditampilkan: no_urut, kode_pelanggan, nama_pelanggan, dan alamat.

SELECT no_urut, kode_pelanggan, nama_pelanggan, alamat FROM ms_pelanggan
WHERE nama_pelanggan LIKE '%S.H%' OR nama_pelanggan LIKE '%Ir.%' OR nama_pelanggan LIKE '%Drs.%';


2. Mengurutkan Nama Pelanggan
Tampilkan nama-nama pelanggan dan urutkan hasilnya berdasarkan kolom nama_pelanggan dari yang terkecil ke yang terbesar (A ke Z).
Nama kolom yang harus ditampilkan: nama_pelanggan

SELECT nama_pelanggan FROM ms_pelanggan
ORDER BY nama_pelanggan;

3. Mengurutkan Nama Pelanggan Tanpa Gelar
Tampilkan nama-nama pelanggan dan urutkan hasilnya berdasarkan kolom nama_pelanggan dari yang terkecil ke yang terbesar (A ke Z), namun gelar tidak boleh menjadi bagian dari urutan. Contoh: Ir. Agus Nugraha harus berada di atas Heidi Goh.
Nama kolom yang harus ditampilkan: nama_pelanggan

SELECT nama_pelanggan FROM ms_pelanggan
ORDER BY
CASE WHEN LEFT (nama_pelanggan,3) = 'Ir.' THEN SUBSTRING(nama_pelanggan,5) ELSE nama_pelanggan END asc;

4. Nama Pelanggan yang Paling Panjang
Tampilkan nama pelanggan yang memiliki nama paling panjang. Jika ada lebih dari 1 orang yang memiliki panjang nama yang sama, tampilkan semuanya.
Nama kolom yang harus ditampilkan: nama_pelanggan.

SELECT nama_pelanggan
FROM ms_pelanggan
WHERE LENGTH(nama_pelanggan)
IN (SELECT MAX(LENGTH(nama_pelanggan)) FROM ms_pelanggan;

5. Nama Pelanggan yang Paling Panjang dengan Gelar
Tampilkan nama orang yang memiliki nama paling panjang (pada row atas), dan nama orang paling pendek (pada row setelahnya). Gelar menjadi bagian dari nama. Jika ada lebih dari satu nama yang paling panjang atau paling pendek, harus ditampilkan semuanya.
Nama kolom yang harus ditampilkan: nama_pelanggan.

SELECT nama_pelanggan 
FROM ms_pelanggan
WHERE LENGTH(nama_pelanggan)
IN (SELECT MIN(LENGTH(nama_pelanggan)) FROM ms_pelanggan) OR LENGTH(nama_pelanggan) IN (SELECT MAX(LENGTH(nama_pelanggan)) FROM ms_pelanggan)
ORDER BY LENGTH(nama_pelanggan) DESC;

6. Kuantitas Produk yang Banyak Terjual
Tampilkan produk yang paling banyak terjual dari segi kuantitas. Jika ada lebih dari 1 produk dengan nilai yang sama, tampilkan semua produk tersebut.
Nama kolom yang harus ditampilkan: kode_produk, nama_produk,total_qty.

SELECT tr_penjualan_detail.kode_produk, ms_produk.nama_produk, SUM(qty) as total_qty
FROM tr_penjualan_detail
INNER JOIN ms_produk
ON ms_produk.kode_produk=tr_penjualan_detail.kode_produk
GROUP BY kode_produk, nama_produk
ORDER BY total_qty DESC
LIMIT 2;

7. Pelanggan Paling Tinggi Nilai Belanjanya
Siapa saja pelanggan yang paling banyak menghabiskan uangnya untuk belanja? Jika ada lebih dari 1 pelanggan dengan nilai yang sama, tampilkan semua pelanggan tersebut. Nama kolom yang harus ditampilkan: kode_pelanggan, nama_pelanggan, total_harga

SELECT tr_penjualan.kode_pelanggan, 
ms_pelanggan.nama_pelanggan, SUM(tr_penjualan_detail.qty*tr_penjualan_detail.harga_satuan) as total_harga 
FROM tr_penjualan_detail
INNER JOIN tr_penjualan
ON tr_penjualan_detail.kode_transaksi = tr_penjualan.kode_transaksi
INNER JOIN ms_pelanggan
ON tr_penjualan.kode_pelanggan = ms_pelanggan.kode_pelanggan
GROUP BY kode_pelanggan, nama_pelanggan
ORDER BY total_harga DESC
LIMIT 1;

8. Pelanggan yang Belum Pernah Berbelanja
Tampilkan daftar pelanggan yang belum pernah melakukan transaksi.
Nama kolom yang harus ditampilkan: kode_pelanggan, nama_pelanggan, alamat.

SELECT kode_pelanggan, nama_pelanggan, alamat
FROM ms_pelanggan
WHERE kode_pelanggan NOT IN (SELECT kode_pelanggan FROM tr_penjualan);

9. Transaksi Belanja dengan Daftar Belanja lebih dari 1
ampilkan transaksi-transaksi yang memiliki jumlah item produk lebih dari 1 jenis produk. Dengan lain kalimat, tampilkan transaksi-transaksi yang memiliki jumlah baris data pada table tr_penjualan_detail lebih dari satu.
Nama kolom yang harus ditampilkan:  kode_transaksi, kode_pelanggan, nama_pelanggan, tanggal_transaksi, jumlah_detail

SELECT tr_penjualan_detail.kode_transaksi, ms_pelanggan.kode_pelanggan, ms_pelanggan.nama_pelanggan, tr_penjualan.tanggal_transaksi, COUNT(tr_penjualan_detail.kode_produk) as jumlah_detail
FROM tr_penjualan_detail
INNER JOIN tr_penjualan
ON tr_penjualan_detail.kode_transaksi = tr_penjualan.kode_transaksi
INNER JOIN ms_pelanggan
ON tr_penjualan.kode_pelanggan = ms_pelanggan.kode_pelanggan
GROUP BY kode_transaksi, kode_pelanggan, nama_pelanggan, tanggal_transaksi
HAVING COUNT(tr_penjualan_detail.kode_produk)>1;

